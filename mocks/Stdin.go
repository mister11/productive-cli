// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	config "github.com/mister11/productive-cli/internal/config"
	mock "github.com/stretchr/testify/mock"
)

// Stdin is an autogenerated mock type for the Stdin type
type Stdin struct {
	mock.Mock
}

// Input provides a mock function with given fields: label
func (_m *Stdin) Input(label string) string {
	ret := _m.Called(label)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(label)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InputMasked provides a mock function with given fields: label
func (_m *Stdin) InputMasked(label string) string {
	ret := _m.Called(label)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(label)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InputMultiple provides a mock function with given fields: label
func (_m *Stdin) InputMultiple(label string) []string {
	ret := _m.Called(label)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SelectOne provides a mock function with given fields: label, options
func (_m *Stdin) SelectOne(label string, options []interface{}) interface{} {
	ret := _m.Called(label, options)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, []interface{}) interface{}); ok {
		r0 = rf(label, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// SelectOneWithSearch provides a mock function with given fields: label, options, searchFunction
func (_m *Stdin) SelectOneWithSearch(label string, options []config.Project, searchFunction func(string, int) bool) interface{} {
	ret := _m.Called(label, options, searchFunction)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, []config.Project, func(string, int) bool) interface{}); ok {
		r0 = rf(label, options, searchFunction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}
