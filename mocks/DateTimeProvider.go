// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// DateTimeProvider is an autogenerated mock type for the DateTimeProvider type
type DateTimeProvider struct {
	mock.Mock
}

// Format provides a mock function with given fields: _a0
func (_m *DateTimeProvider) Format(_a0 time.Time) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetWeekDays provides a mock function with given fields:
func (_m *DateTimeProvider) GetWeekDays() []time.Time {
	ret := _m.Called()

	var r0 []time.Time
	if rf, ok := ret.Get(0).(func() []time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]time.Time)
		}
	}

	return r0
}

// Now provides a mock function with given fields:
func (_m *DateTimeProvider) Now() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// ToISOTime provides a mock function with given fields: timeString
func (_m *DateTimeProvider) ToISOTime(timeString string) time.Time {
	ret := _m.Called(timeString)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(timeString)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// WeekEnd provides a mock function with given fields:
func (_m *DateTimeProvider) WeekEnd() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// WeekStart provides a mock function with given fields:
func (_m *DateTimeProvider) WeekStart() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}
