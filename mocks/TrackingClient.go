// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	time "time"

	model "github.com/mister11/productive-cli/internal/client/model"
	mock "github.com/stretchr/testify/mock"
)

// TrackingClient is an autogenerated mock type for the TrackingClient type
type TrackingClient struct {
	mock.Mock
}

// CreateTimeEntry provides a mock function with given fields: timeEntry
func (_m *TrackingClient) CreateTimeEntry(timeEntry *model.TimeEntry) {
	_m.Called(timeEntry)
}

// GetOrganizationMembership provides a mock function with given fields:
func (_m *TrackingClient) GetOrganizationMembership() []model.OrganizationMembership {
	ret := _m.Called()

	var r0 []model.OrganizationMembership
	if rf, ok := ret.Get(0).(func() []model.OrganizationMembership); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OrganizationMembership)
		}
	}

	return r0
}

// SearchDeals provides a mock function with given fields: query, dat
func (_m *TrackingClient) SearchDeals(query string, dat time.Time) []interface{} {
	ret := _m.Called(query, dat)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(string, time.Time) []interface{}); ok {
		r0 = rf(query, dat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// SearchService provides a mock function with given fields: query, dealID, day
func (_m *TrackingClient) SearchService(query string, dealID string, day time.Time) []interface{} {
	ret := _m.Called(query, dealID, day)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(string, string, time.Time) []interface{}); ok {
		r0 = rf(query, dealID, day)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}
